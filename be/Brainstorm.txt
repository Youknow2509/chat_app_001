Chat APP
 - API_KEY = 123456 <- Authentication: Bearer {API_KEY}
 - ?page=2&limit=20
1. Auth service /auth
 - Đăng ký -> OTP verify
 - Verify đăng ký -> tạo mật khẩu
 - Đăng nhập -> trả về access_token, refresh_token, thông tin tên, email, ảnh
 {
 "access_token",
 "refresh_token",
 "userInfo":{
 name,email, avt_url
    }
 }
 - /validateToken <- true
 - /validateRefreshToken <- true
 - /refreshToken
2. User service /user
 - /getUserInfo (dùng token) -> get full
 - /findUser/{email} (dùng token) -> tên, email, ảnh
 - /updateUser <- tên, ảnh,..
 - /addFriendRequest/{email} <- token - kết bạn
 - /responseFriendRequest/{friendRequestId}
    + từ chối hoặc chấp nhận(0-1)

3.1 User func
 - nhắn tin 1 1, group chat < 30
 - nhắn tin với AI
 - gọi, gọi trong group chat (WebRTC)
 - (react tin nhắn, đang soạn tin,...)
 - gửi ảnh, video
 - (chia sẻ vị trí)
 - đặt biệt danh, đổi tên group chat
 - Thêm người vào group chat

3.2 Chat service /chat
 - /createChat
 {
    list_id[],
    groupName,
 }
 // admin là người gọi api
 // groupType là "group"

 // 2 người đều là admin
 // groupType là "private"

 - /getChatInfo/{chatId} -> {
    chatName,
    numberOfMember,
    list_mem
 }
 - /getLists -> {
    list[{chatName,
    chatId}]
 }
 // mở app thì sort (sort thì gọi api lấy groupid, timestamp)
 // trong khi có websocket thì theo websocket để sort

 - /getUserInChat/{chatId} ->
  {
  chatId,
  listUser // chỉ cần userId
 }
 // sắp xếp thứ tự chats
 - /addMemToChat/{groupId}/{userId}
 - /updateChat/{groupId} <- {
 groupName, avt_url
 }
 - /changeGroupAdmin/{groupId}/{userId} - admin
 - /delMemFromChat/{groupId}/{userId} - admin
 - /delChat/{groupId} - admin
4. Firebase service
 - Thông báo không hiện popup trên android app (lỗi)
 - Thông báo tin nhắn, cuộc gọi đến
 - Thông báo thời tiết
 - Đăng ký thiết bị khi người dùng đăng nhập
 - Xóa thiết bị khi người dùng đăng xuất
5. Message service /message
{
  "_id": ObjectId("message_id"),
  "sender_id": ObjectId("user_id"),  // ID người gửi
  "chat_id": ObjectId("chat_id"),    // ID của cuộc trò chuyện
  "content": "Nội dung tin nhắn",
  "createdAt": 17201929110,
  "deletedAt": 17201929110,
  "message_type": "text",            // Loại tin nhắn (ví dụ: text, image, file, video)
  "status": "sent",                  // Trạng thái tin nhắn (ví dụ: sent, delivered, read)
  "parent_message_id": ObjectId("parent_message_id"),  // ID tin nhắn trả lời (nếu có)
  "media_url": "http://example.com/image.jpg",         // URL của phương tiện (nếu có)
  "is_edited": false,                // Có phải là tin nhắn đã chỉnh sửa không?
  "edited_at": ISODate("2025-02-18T12:10:00Z"),      // Thời gian chỉnh sửa (nếu có)
  "reactions": [                    // Mảng các phản ứng của người dùng
    {
      "user_id": ObjectId("user_id_1"),
      "reaction": "like"             // Ví dụ: like, love, haha
    },
    {
      "user_id": ObjectId("user_id_2"),
      "reaction": "love"
    }
  ]
}
 - Lưu trong database (mongo)
 - gửi tin nhắn
 - xóa tin nhắn
 - load tin nhắn (save cached local storage)
 - tìm kiếm
 - reply
 - (phân loại tin nhắn(file, link))
5.2 /message
 - ws://ip:port/ws
 - /getChats -> {
 groupId, timestamp}
 - /getMessage/{groupId}
 - /editMessage/{msgId} -> {
 content, react}
 - /delMessage/{msgId} -> content thành Đã thu hồi
 - /sendMessage <- obj
 - /findMessage/{groupId} -> {senderId, content} // tìm giống 1 vài kí tự
 // có phân trang
6. Call, call video (webrtc)
 - 1 1, group chat < 10
 - lưu lịch sử
 - gọi
7. AI
 - hỏi -> gọi api -> trả message vào websocket
8. Load balancer

 - TODO:
 Design database
