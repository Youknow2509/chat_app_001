// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_base_001.sql

package database

import (
	"context"
	"database/sql"
)

const addUserBaseWithUUID = `-- name: AddUserBaseWithUUID :execresult
INSERT INTO ` + "`" + `user_base` + "`" + ` (
    user_id,
    user_account, user_password, user_salt, user_is_refresh_token, 
    user_created_at, user_updated_at
) VALUES (
    ?, ?, ?, ?, 0, NOW(), NOW()
)
`

type AddUserBaseWithUUIDParams struct {
	UserID       string
	UserAccount  string
	UserPassword string
	UserSalt     string
}

func (q *Queries) AddUserBaseWithUUID(ctx context.Context, arg AddUserBaseWithUUIDParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserBaseWithUUID,
		arg.UserID,
		arg.UserAccount,
		arg.UserPassword,
		arg.UserSalt,
	)
}

const checkUserBaseExists = `-- name: CheckUserBaseExists :one
SELECT COUNT(*)
FROM ` + "`" + `user_base` + "`" + `
WHERE user_account = ?
`

func (q *Queries) CheckUserBaseExists(ctx context.Context, userAccount string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserBaseExists, userAccount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUserBaseExistsWithID = `-- name: CheckUserBaseExistsWithID :one
SELECT COUNT(*)
FROM ` + "`" + `user_base` + "`" + `
WHERE user_id = ?
`

func (q *Queries) CheckUserBaseExistsWithID(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserBaseExistsWithID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIDUserWithEmail = `-- name: GetIDUserWithEmail :one
SELECT user_id
FROM ` + "`" + `user_base` + "`" + `
WHERE user_account = ?
LIMIT 1
`

func (q *Queries) GetIDUserWithEmail(ctx context.Context, userAccount string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIDUserWithEmail, userAccount)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getOneUserInfo = `-- name: GetOneUserInfo :one
SELECT user_id, user_account, user_password, user_salt, user_is_refresh_token
FROM ` + "`" + `user_base` + "`" + `
WHERE user_account = ?
`

type GetOneUserInfoRow struct {
	UserID             string
	UserAccount        string
	UserPassword       string
	UserSalt           string
	UserIsRefreshToken sql.NullInt32
}

func (q *Queries) GetOneUserInfo(ctx context.Context, userAccount string) (GetOneUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getOneUserInfo, userAccount)
	var i GetOneUserInfoRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSalt,
		&i.UserIsRefreshToken,
	)
	return i, err
}

const getOneUserInfoAdmin = `-- name: GetOneUserInfoAdmin :one
SELECT user_id, user_account, user_password, user_salt, user_is_refresh_token,
    user_login_time, user_logout_time, user_login_ip, user_created_at, user_updated_at
FROM ` + "`" + `user_base` + "`" + `
WHERE user_account = ?
`

func (q *Queries) GetOneUserInfoAdmin(ctx context.Context, userAccount string) (UserBase, error) {
	row := q.db.QueryRowContext(ctx, getOneUserInfoAdmin, userAccount)
	var i UserBase
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSalt,
		&i.UserIsRefreshToken,
		&i.UserLoginTime,
		&i.UserLogoutTime,
		&i.UserLoginIp,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const isRefreshTokenUser = `-- name: IsRefreshTokenUser :one
SELECT user_is_refresh_token
FROM ` + "`" + `user_base` + "`" + `
WHERE user_account = ?
`

func (q *Queries) IsRefreshTokenUser(ctx context.Context, userAccount string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, isRefreshTokenUser, userAccount)
	var user_is_refresh_token sql.NullInt32
	err := row.Scan(&user_is_refresh_token)
	return user_is_refresh_token, err
}

const isRefreshTokenUserWithID = `-- name: IsRefreshTokenUserWithID :one
SELECT user_is_refresh_token
FROM ` + "`" + `user_base` + "`" + `
WHERE user_id = ?
`

func (q *Queries) IsRefreshTokenUserWithID(ctx context.Context, userID string) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, isRefreshTokenUserWithID, userID)
	var user_is_refresh_token sql.NullInt32
	err := row.Scan(&user_is_refresh_token)
	return user_is_refresh_token, err
}

const loginUserBase = `-- name: LoginUserBase :exec
UPDATE ` + "`" + `user_base` + "`" + `
SET user_login_time = NOW(), user_login_ip = ?, user_is_refresh_token = 0
WHERE user_account = ? AND user_password = ?
`

type LoginUserBaseParams struct {
	UserLoginIp  sql.NullString
	UserAccount  string
	UserPassword string
}

func (q *Queries) LoginUserBase(ctx context.Context, arg LoginUserBaseParams) error {
	_, err := q.db.ExecContext(ctx, loginUserBase, arg.UserLoginIp, arg.UserAccount, arg.UserPassword)
	return err
}

const logoutUserBase = `-- name: LogoutUserBase :exec
UPDATE ` + "`" + `user_base` + "`" + `
SET user_logout_time = NOW()
WHERE user_account = ?
`

func (q *Queries) LogoutUserBase(ctx context.Context, userAccount string) error {
	_, err := q.db.ExecContext(ctx, logoutUserBase, userAccount)
	return err
}

const refreshTokenUserOff = `-- name: RefreshTokenUserOff :exec
UPDATE ` + "`" + `user_base` + "`" + `
SET user_is_refresh_token = 1
WHERE user_account = ?
`

func (q *Queries) RefreshTokenUserOff(ctx context.Context, userAccount string) error {
	_, err := q.db.ExecContext(ctx, refreshTokenUserOff, userAccount)
	return err
}

const refreshTokenUserOn = `-- name: RefreshTokenUserOn :exec
UPDATE ` + "`" + `user_base` + "`" + `
SET user_is_refresh_token = 0
WHERE user_account = ?
`

func (q *Queries) RefreshTokenUserOn(ctx context.Context, userAccount string) error {
	_, err := q.db.ExecContext(ctx, refreshTokenUserOn, userAccount)
	return err
}

const updatePasswordWithUserID = `-- name: UpdatePasswordWithUserID :exec
UPDATE ` + "`" + `user_base` + "`" + ` 
SET user_password = ? WHERE user_id = ?
`

type UpdatePasswordWithUserIDParams struct {
	UserPassword string
	UserID       string
}

func (q *Queries) UpdatePasswordWithUserID(ctx context.Context, arg UpdatePasswordWithUserIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePasswordWithUserID, arg.UserPassword, arg.UserID)
	return err
}
