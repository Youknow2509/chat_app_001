// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token_001.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at < now()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteExpiredRefreshTokensByUserID = `-- name: DeleteExpiredRefreshTokensByUserID :exec
DELETE FROM refresh_tokens WHERE expires_at < now() AND user_id = ?
`

func (q *Queries) DeleteExpiredRefreshTokensByUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokensByUserID, userID)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens WHERE id = ?
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, id)
	return err
}

const deleteRefreshTokenByUserID = `-- name: DeleteRefreshTokenByUserID :exec
DELETE FROM refresh_tokens WHERE user_id = ?
`

func (q *Queries) DeleteRefreshTokenByUserID(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshTokenByUserID, userID)
	return err
}

const execTokenUsed = `-- name: ExecTokenUsed :exec
UPDATE refresh_tokens
SET is_used = 0
WHERE refresh_token = ?
`

func (q *Queries) ExecTokenUsed(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, execTokenUsed, refreshToken)
	return err
}

const execTokenUsedWithID = `-- name: ExecTokenUsedWithID :exec
UPDATE refresh_tokens
SET is_used = 0
WHERE id = ?
`

func (q *Queries) ExecTokenUsedWithID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, execTokenUsedWithID, id)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT 
    id,
    refresh_token,
    user_id,
    is_used,
    expires_at,
    created_at,
    updated_at
FROM refresh_tokens WHERE refresh_token = ?
`

type GetRefreshTokenRow struct {
	ID           string
	RefreshToken string
	UserID       string
	IsUsed       int32
	ExpiresAt    time.Time
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

func (q *Queries) GetRefreshToken(ctx context.Context, refreshToken string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, refreshToken)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefreshTokenByID = `-- name: GetRefreshTokenByID :one
SELECT id, user_id, refresh_token, is_used, expires_at, created_at, updated_at
FROM refresh_tokens WHERE id = ?
`

func (q *Queries) GetRefreshTokenByID(ctx context.Context, id string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByID, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsUsed,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :many
SELECT id, user_id, refresh_token, is_used, expires_at, created_at, updated_at
FROM refresh_tokens WHERE user_id = ?
`

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID string) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokenByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.IsUsed,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatusRefreshToken = `-- name: GetStatusRefreshToken :one
SELECT is_used
FROM refresh_tokens 
WHERE refresh_token = ?
LIMIT 1
`

func (q *Queries) GetStatusRefreshToken(ctx context.Context, refreshToken string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getStatusRefreshToken, refreshToken)
	var is_used int32
	err := row.Scan(&is_used)
	return is_used, err
}

const getStatusRefreshTokenWithID = `-- name: GetStatusRefreshTokenWithID :one
SELECT is_used
FROM refresh_tokens 
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetStatusRefreshTokenWithID(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getStatusRefreshTokenWithID, id)
	var is_used int32
	err := row.Scan(&is_used)
	return is_used, err
}

const getValidRefreshTokensByUserID = `-- name: GetValidRefreshTokensByUserID :many
SELECT 
    id
FROM refresh_tokens
WHERE expires_at > CURRENT_TIMESTAMP 
    AND is_used = 1
    AND user_id = ?
`

func (q *Queries) GetValidRefreshTokensByUserID(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getValidRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_tokens (
    id,
    refresh_token,
    user_id,
    expires_at,
    created_at,
    updated_at
) VALUES (?, ?, ?, ?, now(), now())
`

type InsertRefreshTokenParams struct {
	ID           string
	RefreshToken string
	UserID       string
	ExpiresAt    time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken,
		arg.ID,
		arg.RefreshToken,
		arg.UserID,
		arg.ExpiresAt,
	)
	return err
}
