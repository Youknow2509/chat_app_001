// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: friends_001.sql

package database

import (
	"context"
	"database/sql"
)

const getFriendRequestUserReceive = `-- name: GetFriendRequestUserReceive :many
SELECT
    id,
    from_user,
    status,
    created_at
FROM friend_requests
WHERE to_user = ?
`

type GetFriendRequestUserReceiveRow struct {
	ID        string
	FromUser  sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) GetFriendRequestUserReceive(ctx context.Context, toUser sql.NullString) ([]GetFriendRequestUserReceiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendRequestUserReceive, toUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendRequestUserReceiveRow
	for rows.Next() {
		var i GetFriendRequestUserReceiveRow
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendRequestUserSend = `-- name: GetFriendRequestUserSend :many
SELECT
    id,
    to_user,
    status,
    created_at
FROM friend_requests 
WHERE from_user = ?
`

type GetFriendRequestUserSendRow struct {
	ID        string
	ToUser    sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) GetFriendRequestUserSend(ctx context.Context, fromUser sql.NullString) ([]GetFriendRequestUserSendRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendRequestUserSend, fromUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendRequestUserSendRow
	for rows.Next() {
		var i GetFriendRequestUserSendRow
		if err := rows.Scan(
			&i.ID,
			&i.ToUser,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriendUser = `-- name: GetFriendUser :many
SELECT ui.user_id, ui.user_nickname, ui.user_avatar, ui.user_email
FROM (
    SELECT 
        CASE 
            WHEN friends.user_id = ? THEN friend_id 
            ELSE friends.user_id 
        END AS friend_id
    FROM friends
    WHERE friends.user_id = ? OR friend_id = ?
) AS f
JOIN user_info ui ON ui.user_id = f.friend_id
`

type GetFriendUserParams struct {
	UserID   sql.NullString
	UserID_2 sql.NullString
	FriendID sql.NullString
}

type GetFriendUserRow struct {
	UserID       string
	UserNickname sql.NullString
	UserAvatar   sql.NullString
	UserEmail    sql.NullString
}

func (q *Queries) GetFriendUser(ctx context.Context, arg GetFriendUserParams) ([]GetFriendUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriendUser, arg.UserID, arg.UserID_2, arg.FriendID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendUserRow
	for rows.Next() {
		var i GetFriendUserRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFriendRequest = `-- name: InsertFriendRequest :exec
INSERT INTO friend_requests (id, from_user, to_user, status, created_at)
VALUES (?, ?, ?, 'pending', now())
`

type InsertFriendRequestParams struct {
	ID       string
	FromUser sql.NullString
	ToUser   sql.NullString
}

func (q *Queries) InsertFriendRequest(ctx context.Context, arg InsertFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, insertFriendRequest, arg.ID, arg.FromUser, arg.ToUser)
	return err
}

const responseFriendRequest = `-- name: ResponseFriendRequest :exec
UPDATE friend_requests
SET status = ?
WHERE id = ?
`

type ResponseFriendRequestParams struct {
	Status sql.NullString
	ID     string
}

func (q *Queries) ResponseFriendRequest(ctx context.Context, arg ResponseFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, responseFriendRequest, arg.Status, arg.ID)
	return err
}

const updateFriendRequest = `-- name: UpdateFriendRequest :exec
UPDATE friend_requests
SET status = ?
WHERE id = ?
`

type UpdateFriendRequestParams struct {
	Status sql.NullString
	ID     string
}

func (q *Queries) UpdateFriendRequest(ctx context.Context, arg UpdateFriendRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateFriendRequest, arg.Status, arg.ID)
	return err
}
