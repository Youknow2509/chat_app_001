// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type UserInfoUserGender string

const (
	UserInfoUserGenderSecret UserInfoUserGender = "Secret"
	UserInfoUserGenderMale   UserInfoUserGender = "Male"
	UserInfoUserGenderFemale UserInfoUserGender = "Female"
)

func (e *UserInfoUserGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserInfoUserGender(s)
	case string:
		*e = UserInfoUserGender(s)
	default:
		return fmt.Errorf("unsupported scan type for UserInfoUserGender: %T", src)
	}
	return nil
}

type NullUserInfoUserGender struct {
	UserInfoUserGender UserInfoUserGender
	Valid              bool // Valid is true if UserInfoUserGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserInfoUserGender) Scan(value interface{}) error {
	if value == nil {
		ns.UserInfoUserGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserInfoUserGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserInfoUserGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserInfoUserGender), nil
}

type UserInfoUserState string

const (
	UserInfoUserStateLocked       UserInfoUserState = "Locked"
	UserInfoUserStateActivated    UserInfoUserState = "Activated"
	UserInfoUserStateNotActivated UserInfoUserState = "Not Activated"
)

func (e *UserInfoUserState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserInfoUserState(s)
	case string:
		*e = UserInfoUserState(s)
	default:
		return fmt.Errorf("unsupported scan type for UserInfoUserState: %T", src)
	}
	return nil
}

type NullUserInfoUserState struct {
	UserInfoUserState UserInfoUserState
	Valid             bool // Valid is true if UserInfoUserState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserInfoUserState) Scan(value interface{}) error {
	if value == nil {
		ns.UserInfoUserState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserInfoUserState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserInfoUserState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserInfoUserState), nil
}

type AuthToken struct {
	ID     string
	UserID string
	// Cache key save token in redis
	CacheKey    string
	AccessToken string
	CreatedAt   sql.NullTime
	ExpiresAt   time.Time
}

type Chat struct {
	ID string
	// Type: private | group
	Type        string
	GroupName   sql.NullString
	GroupAvatar sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

type ChatMember struct {
	ChatID string
	UserID string
	// Role: admin | member
	Role string
}

type Friend struct {
	UserID   sql.NullString
	FriendID sql.NullString
}

type FriendRequest struct {
	ID        string
	FromUser  sql.NullString
	ToUser    sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Notification struct {
	ID        string
	UserID    sql.NullString
	Type      sql.NullString
	Data      json.RawMessage
	CreatedAt sql.NullTime
}

type RefreshToken struct {
	ID           string
	UserID       string
	RefreshToken string
	// True 0, False 1
	IsUsed    int32
	ExpiresAt time.Time
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type UserBase struct {
	// User ID
	UserID string
	// User account
	UserAccount string
	// User password
	UserPassword string
	// Salt for hashing
	UserSalt string
	// Refresh token status: 0 true | 1 false
	UserIsRefreshToken sql.NullInt32
	// Last login timestamp
	UserLoginTime sql.NullTime
	// Last logout timestamp
	UserLogoutTime sql.NullTime
	// IP address of last login
	UserLoginIp sql.NullString
	// Creation timestamp
	UserCreatedAt sql.NullTime
	// Update timestamp
	UserUpdatedAt sql.NullTime
}

type UserInfo struct {
	// User ID
	UserID string
	// User account
	UserAccount string
	// User nickname
	UserNickname sql.NullString
	// User avatar
	UserAvatar sql.NullString
	// User state
	UserState UserInfoUserState
	// Mobile phone number
	UserMobile sql.NullString
	// User gender
	UserGender NullUserInfoUserGender
	// User birthday
	UserBirthday sql.NullTime
	// User email address
	UserEmail sql.NullString
	// Authentication status: 1 false | 0 true
	UserIsAuthentication sql.NullInt16
	// Record creation time
	CreatedAt sql.NullTime
	// Record update time
	UpdatedAt sql.NullTime
}

type UserVerify struct {
	// Verification ID
	VerifyID int32
	// One-time password
	VerifyOtp string
	// Verification key - email address, phone number, ....
	VerifyKey string
	// Hash of the verification key
	VerifyKeyHash string
	// Verification type (e.g., 1 for email)
	VerifyType sql.NullInt32
	// Verification status: 1 for verified, 0 for not verified
	IsVerified sql.NullInt32
	// Deletion flag: 1 for deleted, 0 for not deleted
	IsDeleted sql.NullInt32
	// Record creation time
	VerifyCreatedAt sql.NullTime
	// Record update time
	VerifyUpdatedAt sql.NullTime
}
